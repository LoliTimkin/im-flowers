{"version":3,"file":"src_app_views_user_user_module_ts.js","mappings":"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","sources":["./src/app/views/user/login/login.component.ts","./src/app/views/user/login/login.component.html","./src/app/views/user/signup/signup.component.ts","./src/app/views/user/signup/signup.component.html","./src/app/views/user/user-routing.module.ts","./src/app/views/user/user.module.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport {FormBuilder, Validators} from \"@angular/forms\";\nimport {AuthService} from \"../../../core/auth/auth.service\";\nimport {DefaultResponseType} from \"../../../../types/default-response.type\";\nimport {LoginResponseType} from \"../../../../types/login-response.type\";\nimport {HttpErrorResponse} from \"@angular/common/http\";\nimport {MatSnackBar} from \"@angular/material/snack-bar\";\nimport {Router} from \"@angular/router\";\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.scss']\n})\nexport class LoginComponent implements OnInit {\n\n  loginForm = this.fb.group({\n    email: ['', [Validators.email, Validators.required]],\n    password: ['', [Validators.required]],\n    rememberMe: [false,],\n  })\n\n  constructor(private fb: FormBuilder,\n              private authService: AuthService,\n              private _snackBar: MatSnackBar,\n              private router: Router\n  ) {\n\n  }\n\n  ngOnInit(): void {\n\n  }\n\n  login(): void {\n    if (this.loginForm.valid && this.loginForm.value.email && this.loginForm.value.password) {\n      this.authService.login(this.loginForm.value.email, this.loginForm.value.password, !!this.loginForm.value.rememberMe)\n        .subscribe({\n          next: (data: DefaultResponseType | LoginResponseType) => {\n            let error = null;\n            if ((data as DefaultResponseType).error !== undefined) {\n              error = (data as DefaultResponseType).message\n            }\n            const loginResponse = data as LoginResponseType;\n            if (!loginResponse.accessToken ||  !loginResponse.refreshToken || !loginResponse.userId) {\n              error = 'Ошибка авторизации'\n            }\n\n            if (error) {\n              this._snackBar.open(error);\n              throw new Error(error);\n            }\n\n\n            this.authService.setTokens(loginResponse.accessToken, loginResponse.refreshToken);\n            this.authService.userId = loginResponse.userId;\n            this._snackBar.open(\"Вы успешно авторизовались\");\n            this.router.navigate(['/']);\n          },\n          error: (errorResponse: HttpErrorResponse) => {\n            if (errorResponse.error && errorResponse.error.message) {\n              this._snackBar.open(errorResponse.error.message)\n            } else {\n              this._snackBar.open('ошибка авторизации')\n            }\n          }\n        })\n    }\n  }\n}\n","<section class=\"login\" [formGroup]=\"loginForm\">\n  <div class=\"container\">\n    <div class=\"auth-form\">\n      <div class=\"auth-title\">\n        Войти в личный кабинет\n      </div>\n      <div class=\"auth-inputs\">\n        <div class=\"auth-input\">\n          <input type=\"text\" class=\"input\"\n                 [ngStyle]=\"{'border-color': loginForm.get('email')?.invalid\n                 && loginForm.get('email')?.dirty || loginForm.get('email')?.touched ? 'red' : ''}\"\n                 placeholder=\"Электронная почта\" formControlName=\"email\">\n        </div>\n        <div class=\"auth-input\">\n          <input type=\"password\" class=\"input\"\n                 [ngStyle]=\"{'border-color': loginForm.get('password')?.invalid\n                 && loginForm.get('password')?.dirty || loginForm.get('password')?.touched ? 'red' : ''}\"\n                 placeholder=\"Пароль\" formControlName=\"password\">\n        </div>\n        <div class=\"auth-checkbox\">\n          <input type=\"checkbox\" id=\"remember\" formControlName=\"rememberMe\">\n          <label for=\"remember\">Запомнить меня</label>\n        </div>\n      </div>\n      <div class=\"auth-button\">\n        <button class=\"button\" [disabled]=\"loginForm.invalid\" (click)=\"login()\">Войти</button>\n      </div>\n       <div class=\"auth-link\">\n         Нет аккаунта <a routerLink=\"/signup\">Зарегистрируйтесь</a>\n       </div>\n    </div>\n    <div class=\"page-image\">\n      <img src=\"/assets/images/page/login.png\" alt=\"Цветок на фоне\">\n    </div>\n  </div>\n</section>\n","import { Component, OnInit } from '@angular/core';\nimport {FormBuilder, Validators} from \"@angular/forms\";\nimport {AuthService} from \"../../../core/auth/auth.service\";\nimport {MatSnackBar} from \"@angular/material/snack-bar\";\nimport {Router} from \"@angular/router\";\nimport {DefaultResponseType} from \"../../../../types/default-response.type\";\nimport {LoginResponseType} from \"../../../../types/login-response.type\";\nimport {HttpErrorResponse} from \"@angular/common/http\";\n\n@Component({\n  selector: 'app-signup',\n  templateUrl: './signup.component.html',\n  styleUrls: ['./signup.component.scss']\n})\nexport class SignupComponent implements OnInit {\n\n  signupForm = this.fb.group({\n    email: ['', [Validators.email, Validators.required]],\n    password: ['', [Validators.required], Validators.pattern(/^(?=.*\\d)(?=.*[!@#$%^&*])(?=.*[a-z])(?=.*[A-Z]).{8,}$/)],\n    passwordRepeat: ['', [Validators.required], Validators.pattern(/^(?=.*\\d)(?=.*[!@#$%^&*])(?=.*[a-z])(?=.*[A-Z]).{8,}$/)],\n    agree: [false, Validators.requiredTrue],\n  })\n\n  constructor(private fb: FormBuilder,\n              private authService: AuthService,\n              private _snackBar: MatSnackBar,\n              private router: Router) {\n\n  }\n\n  ngOnInit(): void {\n  }\n\n  signup() {\n    if (this.signupForm.valid && this.signupForm.value.email && this.signupForm.value.password\n      && this.signupForm.value.passwordRepeat && this.signupForm.value.agree) {\n      this.authService.signup(this.signupForm.value.email, this.signupForm.value.password,\n        this.signupForm.value.passwordRepeat)\n        .subscribe({\n          next: (data: DefaultResponseType | LoginResponseType) => {\n            let error = null;\n            if ((data as DefaultResponseType).error !== undefined) {\n              error = (data as DefaultResponseType).message\n            }\n            const loginResponse = data as LoginResponseType;\n            if (!loginResponse.accessToken ||  !loginResponse.refreshToken || !loginResponse.userId) {\n              error = 'Ошибка авторизации'\n            }\n\n            if (error) {\n              this._snackBar.open(error);\n              throw new Error(error);\n            }\n            this.authService.setTokens(loginResponse.accessToken, loginResponse.refreshToken);\n            this.authService.userId = loginResponse.userId;\n            this._snackBar.open(\"Вы успешно зарегистриролись\");\n            this.router.navigate(['/']);\n          },\n          error: (errorResponse: HttpErrorResponse) => {\n            if (errorResponse.error && errorResponse.error.message) {\n              this._snackBar.open(errorResponse.error.message)\n            } else {\n              this._snackBar.open('ошибка регистрации')\n            }\n          }\n        })\n    }\n  }\n}\n","<section class=\"signup\" [formGroup]=\"signupForm\" PasswordRepeat>\n  <div class=\"container\">\n    <div class=\"auth-form\">\n      <div class=\"auth-title\">\n        Регистрация на сайте\n      </div>\n      <div class=\"auth-inputs\">\n        <div class=\"auth-input\">\n          <input type=\"text\" class=\"input\"\n                 [ngStyle]=\"{'border-color': signupForm.get('email')?.invalid\n                 && signupForm.get('email')?.dirty || signupForm.get('email')?.touched ? 'red' : ''}\"\n                 placeholder=\"Электронная почта\" formControlName=\"email\">\n        </div>\n        <div class=\"auth-input\">\n          <input type=\"password\" class=\"input\"\n                 [ngStyle]=\"{'border-color': signupForm.get('email')?.invalid\n                 && signupForm.get('password')?.dirty || signupForm.get('email')?.touched ? 'red' : ''}\"\n                 placeholder=\"Пароль\" formControlName=\"password\">\n        </div>\n        <div class=\"auth-input\">\n          <input type=\"password\" class=\"input\"\n                 [ngStyle]=\"{'border-color': signupForm.get('email')?.invalid\n                 && signupForm.get('passwordRepeat')?.dirty || signupForm.get('email')?.touched ? 'red' : ''}\"\n                 placeholder=\"Повторите пароль\" formControlName=\"passwordRepeat\">\n        </div>\n        <div class=\"auth-checkbox\">\n          <input type=\"checkbox\" id=\"agree\" formControlName=\"agree\">\n          <label for=\"agree\">\n            Я принимаю <a href=\"#\">условия пользовательского соглашения</a> и даю согласие на <a href=\"#\">обработку персональных данных.</a>\n          </label>\n        </div>\n      </div>\n      <div class=\"auth-button\">\n        <button class=\"button\" [disabled]=\"signupForm.invalid\" (click)=\"signup()\">Зарегистрироваться</button>\n      </div>\n      <div class=\"auth-link\">\n        Уже есть аккаунт? <a routerLink=\"/login\">Войдите</a>\n      </div>\n    </div>\n    <div class=\"page-image\">\n      <img src=\"/assets/images/page/signup.png\" alt=\"Цветок на фоне\">\n    </div>\n  </div>\n</section>\n\n","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport {LoginComponent} from \"./login/login.component\";\nimport {SignupComponent} from \"./signup/signup.component\";\n\nconst routes: Routes = [\n  {path: \"login\", component: LoginComponent},\n  {path: \"signup\", component: SignupComponent}\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class UserRoutingModule { }\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { UserRoutingModule } from './user-routing.module';\nimport { LoginComponent } from './login/login.component';\nimport { SignupComponent } from './signup/signup.component';\nimport {ReactiveFormsModule} from \"@angular/forms\";\nimport {SharedModule} from \"../../shared/shared.module\";\n\n\n@NgModule({\n  declarations: [\n    LoginComponent,\n    SignupComponent\n  ],\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    UserRoutingModule,\n    SharedModule\n  ]\n})\nexport class UserModule { }\n"],"names":[],"sourceRoot":"webpack:///","x_google_ignoreList":[]}